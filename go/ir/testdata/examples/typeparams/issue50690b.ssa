# Name: command-line-arguments.Print
# Package: command-line-arguments
func Print[T ~string](s T):
b0: # entry
	t1 = Const <int> {0}
	t2 = Parameter <T> {s}
	t3 = HeapAlloc <*[1]any>
	t4 = IndexAddr <*any> t3 t1
	t5 = MakeInterface <any> t2
	Store {any} t4 t5
	t7 = Slice <[]any> t3 <nil> <nil> <nil>
	t8 = Call <(n int, err error)> fmt.Println t7
	Jump → b1

b1: ← b0 # exit
	Return

# Name: command-line-arguments.PrintWithPrinter
# Package: command-line-arguments
# Locals:
#   0:	t3 S
func PrintWithPrinter[T ~string, S ~struct{ID T; PrintFn func(T)}](message T, obj S):
b0: # entry
	t1 = Parameter <T> {message}
	t2 = Parameter <S> {obj}
	t3 = StackAlloc <*S>
	Store {S} t3 t2
	t5 = FieldAddr <*func(T)> [1] (PrintFn) t3
	t6 = Load <func(T)> t5
	t7 = Call <()> t6 t1
	Jump → b1

b1: ← b0 # exit
	Return

# Name: PrintWithPrinter$generic#0
# Synthetic: generic
func PrintWithPrinter$generic#0(message string, obj command-line-arguments.PrintShop[string]):
b0: # entry
	t1 = Parameter <string> {message}
	t2 = Parameter <command-line-arguments.PrintShop[string]> {obj}
	t3 = ChangeType <T> t1
	t4 = ChangeType <S> t2
	t5 = Call <()> command-line-arguments.PrintWithPrinter string command-line-arguments.PrintShop[string] t3 t4
	Jump → b1

b1: ← b0 # exit
	Return

# Name: Print$generic#0
# Synthetic: generic
func Print$generic#0(s string):
b0: # entry
	t1 = Parameter <string> {s}
	t2 = ChangeType <T> t1
	t3 = Call <()> command-line-arguments.Print string t2
	Jump → b1

b1: ← b0 # exit
	Return

# Name: command-line-arguments.main
# Package: command-line-arguments
# Locals:
#   0:	t3 PrintShop[string]
func main():
b0: # entry
	t1 = Const <string> {"Hello, world."}
	t2 = Const <string> {"fake"}
	t3 = StackAlloc <*PrintShop[string]>
	t4 = FieldAddr <*string> [0] (ID) t3
	t5 = FieldAddr <*func(string)> [1] (PrintFn) t3
	Store {string} t4 t2
	Store {func(s string)} t5 Print$generic#0
	t8 = Load <PrintShop[string]> t3
	t9 = Call <()> PrintWithPrinter$generic#0 t1 t8
	Jump → b1

b1: ← b0 # exit
	Return

# Name: command-line-arguments.init
# Package: command-line-arguments
# Synthetic: package initializer
func init():
b0: # entry
	t1 = Const <bool> {true}
	t2 = Load <bool> init$guard
	If t2 → b1 b2

b1: ← b0 b2 # exit
	Return

b2: ← b0 # init.start
	Store {bool} init$guard t1
	t6 = Call <()> fmt.init
	Jump → b1
