# Name: command-line-arguments.fn1
# Package: command-line-arguments
func fn1[T string](x T):
b0: # entry
	t1 = Parameter <T> {x}
	t2 = Range <iterator((ok bool, k int, v rune))> t1
	Jump → b2

b1: ← b2 # exit
	Return

b2: ← b0 b3 # rangeiter.loop
	t5 = Phi <iterator((ok bool, k int, v rune))> 0:t2 3:t9
	t6 = Next <(ok bool, k int, v rune)> t5
	t7 = Extract <bool> [0] (ok) t6
	If t7 → b3 b1

b3: ← b2 # rangeiter.body
	t9 = Sigma <iterator((ok bool, k int, v rune))> [b2] t5
	t10 = Sigma <(ok bool, k int, v rune)> [b2] t6
	t11 = Extract <int> [1] (k) t10
	t12 = Extract <rune> [2] (v) t10
	BlankStore t11
	BlankStore t12
	Jump → b2

# Name: command-line-arguments.fn2
# Package: command-line-arguments
func fn2[T [4]int](x T):
b0: # entry
	t1 = Const <int> {-1}
	t2 = Const <int> {1}
	t3 = Parameter <T> {x}
	t4 = Call <int> len t3
	Jump → b2

b1: ← b2 # exit
	Return

b2: ← b0 b3 # rangeindex.loop
	t7 = Phi <int> 0:t4 3:t12
	t8 = Phi <int> 0:t1 3:t13
	t9 = BinOp <int> {+} t8 t2
	t10 = BinOp <bool> {<} t9 t7
	If t10 → b3 b1

b3: ← b2 # rangeindex.body
	t12 = Sigma <int> [b2] t7
	t13 = Sigma <int> [b2] t9
	t14 = Call <()> println t13
	Jump → b2

# Name: command-line-arguments.init
# Package: command-line-arguments
# Synthetic: package initializer
func init():
b0: # entry
	t1 = Const <bool> {true}
	t2 = Load <bool> init$guard
	If t2 → b1 b2

b1: ← b0 b2 # exit
	Return

b2: ← b0 # init.start
	Store {bool} init$guard t1
	Jump → b1
